= form_for [:admin, @callback], role: :form do |f|
  - if @callback.errors.any?
    .alert.alert-danger
      %h4 #{pluralize(@callback.errors.count, "error")} prohibited this template from being saved:
      %ul
      - @callback.errors.full_messages.each do |msg|
        %li= msg

  .row
    .input-group
      = f.label :name
      %br
      = f.text_field :name, placeholder: 'Hello Server'
    .input-group
      = f.label :pattern
      %br
      = f.text_field :pattern, size: 80, placeholder: '/^@server say hello$/i'
      %button.btn.btn-info.badge{type: :button, data: { toggle: :modal, target: '#explain_pattern'}} ?
      .modal.fade{id: :explain_pattern, tabindex: -1, role: :dialog, 'aria-labelledby' => 'explain_pattern_label', 'aria-hidden' => true}
        .modal-dialog
          .modal-content
            .modal-header
              %button.close{type: :button, 'aria-label' => 'Close', data: { dismiss: :modal }}
                %span{'aria-hidden' => true} &times;
              %h4.modal-title{id: "explain_pattern_label"} Explanation of Pattern
            .modal-body
              %p Regex match on a log entry.
    .input-group
      = f.label :match_scheme
      %br
      = f.select :match_scheme, ServerCallback::ALL_MATCH_SCHEMES
      %button.btn.btn-info.badge{type: :button, data: { toggle: :modal, target: '#explain_match_scheme'}} ?
      .modal.fade{id: :explain_match_scheme, tabindex: -1, role: :dialog, 'aria-labelledby' => 'explain_match_scheme_label', 'aria-hidden' => true}
        .modal-dialog
          .modal-content
            .modal-header
              %button.close{type: :button, 'aria-label' => 'Close', data: { dismiss: :modal }}
                %span{'aria-hidden' => true} &times;
              %h4.modal-title{id: "explain_match_scheme_label"} Explanation of Match Scheme
            .modal-body
              %p This option defines which log event will cause the callback to fire.
              %p One of the purposes of this field is to keep players from being able to initiate certain patterns.  For example, we do not want players to see the Message of the Day if they manually type "joined the game" into chat.  But we would like the server to trigger this event.  If we arbitrarily look for "joined the game" without looking at the context, players could trigger the message.
              %p On the other hand, we also do not want the server to initiate certain commands that are intended for the player only.  If the server generates a log entry like '@server help' which contains the text '@server help', it would get stuck in a loop.  Choosing the correct Match Scheme helps to avoid this.
              %p Setting this will cause CobbleBot to selectively apply a pattern as:
              %table.table
                %tbody
                %tr
                  %th any
                  %td
                    any log entry that occurs, e.g.:
                    .well.well-sm
                      %code
                        %strong [10:54:50] [Server thread/INFO]: Starting minecraft server version 1.8.3
                %tr
                  %th player_chat
                  %td
                    only player chat, e.g.:
                    .well.well-sm
                      %code
                        [09:42:50] [Server thread/INFO]: &lt;inertia186&gt;
                        %strong Look, I'm in a small well!
                %tr
                  %th player_emote
                  %td
                    only player emotes (/me)
                    .well.well-sm
                      %code
                        [13:14:37] [Server thread/INFO]: * inertia186
                        %b pretends to work really hard on something
                %tr
                  %th player_chat_or_emote
                  %td
                    either player chat or player emotes
                %tr
                  %th server_messages
                  %td
                    only messages that are none of the above
                    .well.well-sm
                      %code
                        %strong [10:29:29] [Server thread/WARN]: Time ran backwards! Did the system time change?
    .input-group
      = f.label :command
      %br
      = f.text_area :command, cols: 80, rows: 15, placeholder: 'say "Hello World"'
      %button.btn.btn-info.badge{type: :button, data: { toggle: :modal, target: '#explain_command'}} ?
      .modal.fade{id: :explain_command, tabindex: -1, role: :dialog, 'aria-labelledby' => 'explain_command_label', 'aria-hidden' => true}
        .modal-dialog
          .modal-content
            .modal-header
              %button.close{type: :button, 'aria-label' => 'Close', data: { dismiss: :modal }}
                %span{'aria-hidden' => true} &times;
              %h4.modal-title{id: "explain_command_label"} Explanation of Command
            .modal-body
              %p What to do when a pattern match is made.
              %table.table
                %tbody
                %tr
                  %th
                    %code %player% 
                  %td substitutes player name 
    .input-group
      = f.label :cooldown
      %br
      = f.text_field :cooldown, placeholder: '300'
      %button.btn.btn-info.badge{type: :button, data: { toggle: :modal, target: '#explain_cooldown'}} ?
      .modal.fade{id: :explain_cooldown, tabindex: -1, role: :dialog, 'aria-labelledby' => 'explain_cooldown_label', 'aria-hidden' => true}
        .modal-dialog
          .modal-content
            .modal-header
              %button.close{type: :button, 'aria-label' => 'Close', data: { dismiss: :modal }}
                %span{'aria-hidden' => true} &times;
              %h4.modal-title{id: "explain_cooldown_label"} Explanation of Cooldown
            .modal-body
              %p An expression for the minimum number of seconds that must pass before this callback will fire again.  Typically, this is for player chat or emotes.
    .input-group
      = f.label :enabled do
        = f.check_box :enabled
        Enabled
    .input-group
      = f.submit class: 'btn btn-primary'
    .input-group
      = link_to 'Back', admin_server_callbacks_path, class: 'btn btn-info btn-xs'

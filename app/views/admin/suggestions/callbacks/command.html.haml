= render partial: 'button'
.modal.fade{id: "explain_#{@group}_#{@key}", tabindex: -1, role: :dialog, 'aria-labelledby' => 'explain_command_label', 'aria-hidden' => true}
  .modal-dialog.modal-lg
    .modal-content
      .modal-header
        %button.close{type: :button, 'aria-label' => 'Close', data: { dismiss: :modal }}
          %span{'aria-hidden' => true} &times;
        %h4.modal-title#explain_command_label Explanation of Command
      .modal-body
        %p Commands tell CobbleBot what to do when a pattern match is made.  They can be an entire program with variables and conditions.  Any valid ruby program will be executed each time a pattern match is made.
        %table.table
          %tbody
          %tr
            %th{nowrap: :nowrap}
              %code say "@a", "Hello World"
            %td causes the server to output a message to all players
          %tr
            %th{nowrap: :nowrap}
              %code say_link "@a", "http://www.mojang.com/"
              %br
              %code say_link "@r", "http://www.cnn.com/"
            %td causes the server to output a link
          %tr
            %th
              %code %nick%
            %td
              %p substitutes player name, if applicable
              %p For example, this would cause the server to use the name of the player who initiated the pattern, only to that player.
              %code say "%nick%", "Hello, %nick%!"
          %tr
            %th
              %code %message%
            %td substitutes the message that was received (e.g., what the player typed in chat)
          %tr
            %th
              %code %1%
            %td
              %p substitutes the first regex group match (1-9 supported)
              %p
                For example, if the callback pattern is
                %code /slap (.*)/i
                then this var becomes the part of the message matched within the parentheses.
              %p A command using this pattern might be:
              %code say "%1%", "Hey, be nice to %1%!"
              